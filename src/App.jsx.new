import React, { useEffect, useRef, useState } from 'react';
import imageAssetURL from './assets/img.png';

const App = () => {
  const canvasRef = useRef(null);
  const animationFrameRef = useRef();
  const [imageData, setImageData] = useState(null);
  const [animationProgress, setAnimationProgress] = useState(0);
  const DOT_SPACING = 0.7;
  const MAX_DOT_SIZE = 0.5;
  const ANIMATION_DURATION = 2000; // 2 seconds

  // Draw dots function with progress parameter (0-1) for animation
  const drawDots = (progress = 1) => {
    if (!imageData || !canvasRef.current) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    // Clear the canvas
    ctx.fillStyle = 'black';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Set dot style
    ctx.fillStyle = 'white';
    
    // Convert rem to pixels
    const rem = parseFloat(getComputedStyle(document.documentElement).fontSize);
    const dotSpacingPx = DOT_SPACING * rem;
    const maxDotSizePx = MAX_DOT_SIZE * rem;
    
    // Calculate number of dots that can fit
    const dotsX = Math.ceil(canvas.width / dotSpacingPx);
    const dotsY = Math.ceil(canvas.height / dotSpacingPx);
    
    // Calculate center point for ripple effect
    const centerX = dotsX / 2;
    const centerY = dotsY / 2;
    const maxDistance = Math.sqrt(centerX * centerX + centerY * centerY);
    
    // Calculate scale to maintain aspect ratio and crop
    const imageAspect = imageData.width / imageData.height;
    const gridAspect = dotsX / dotsY;
    
    let scale, imgWidth, imgHeight, offsetX = 0, offsetY = 0;
    
    if (imageAspect > gridAspect) {
      // Image is wider than grid, scale by height and crop width
      scale = imageData.height / dotsY;
      imgWidth = Math.ceil(dotsX * scale);
      imgHeight = imageData.height;
      offsetX = Math.floor((imageData.width - imgWidth) / 2);
    } else {
      // Image is taller than grid, scale by width and crop height
      scale = imageData.width / dotsX;
      imgWidth = imageData.width;
      imgHeight = Math.ceil(dotsY * scale);
      offsetY = Math.floor((imageData.height - imgHeight) / 2);
    }
    
    // Draw dots
    for (let y = 0; y < dotsY; y++) {
      for (let x = 0; x < dotsX; x++) {
        // Calculate distance from center for ripple effect
        const dx = x - centerX;
        const dy = y - centerY;
        const distance = Math.sqrt(dx * dx + dy * dy);
        const normalizedDistance = distance / maxDistance;
        
        // Only draw dots that should be visible based on animation progress
        if (normalizedDistance > progress) continue;
        
        // Calculate position in the image with proper scaling and centering
        const imgX = Math.min(offsetX + Math.floor(x * scale), imageData.width - 1);
        const imgY = Math.min(offsetY + Math.floor(y * scale), imageData.height - 1);
        
        // Get pixel data
        const pixelIndex = (imgY * imageData.width + imgX) * 4;
        const r = imageData.data[pixelIndex];
        const g = imageData.data[pixelIndex + 1];
        const b = imageData.data[pixelIndex + 2];
        
        // Calculate brightness (0-1)
        const brightness = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
        
        // Calculate dot size based on brightness (darker = smaller dot)
        const dotSizePx = (1 - brightness) * maxDotSizePx;
        
        // Calculate position with centering
        const posX = x * dotSpacingPx + dotSpacingPx / 2;
        const posY = y * dotSpacingPx + dotSpacingPx / 2;
        
        // Calculate animation scale (ease-out effect)
        const dotProgress = Math.min(1, (progress - normalizedDistance) / 0.2);
        const animatedDotSize = dotSizePx * Math.min(1, dotProgress * 1.2);
        
        // Draw dot
        ctx.beginPath();
        ctx.arc(posX, posY, animatedDotSize / 2, 0, Math.PI * 2);
        ctx.fill();
      }
    }
  };

  // Load image and set up canvas
  useEffect(() => {
    const img = new Image();
    img.onload = () => {
      // Create offscreen canvas to get image data
      const tempCanvas = document.createElement('canvas');
      tempCanvas.width = img.width;
      tempCanvas.height = img.height;
      const tempCtx = tempCanvas.getContext('2d');
      
      // Draw image to canvas
      tempCtx.drawImage(img, 0, 0, img.width, img.height);
      
      // Get image data
      const imageData = tempCtx.getImageData(0, 0, img.width, img.height);
      setImageData(imageData);
    };
    
    img.src = imageAssetURL;
  }, []);

  // Handle canvas resize and animation
  useEffect(() => {
    if (!imageData) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      drawDots(animationProgress);
    };

    // Initial setup
    resizeCanvas();
    
    // Handle window resize
    window.addEventListener('resize', resizeCanvas);
    
    // Animation setup
    let animationStart = null;
    
    const animate = (timestamp) => {
      if (!animationStart) animationStart = timestamp;
      
      const elapsed = timestamp - animationStart;
      const progress = Math.min(elapsed / ANIMATION_DURATION, 1);
      
      setAnimationProgress(progress);
      drawDots(progress);
      
      if (progress < 1) {
        animationFrameRef.current = requestAnimationFrame(animate);
      }
    };
    
    // Start animation
    if (animationFrameRef.current) {
      cancelAnimationFrame(animationFrameRef.current);
    }
    animationFrameRef.current = requestAnimationFrame(animate);
    
    // Cleanup
    return () => {
      window.removeEventListener('resize', resizeCanvas);
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, [imageData]);

  // Handle click to restart animation
  const handleCanvasClick = () => {
    setAnimationProgress(0);
    
    // Restart animation
    let animationStart = null;
    
    const animate = (timestamp) => {
      if (!animationStart) animationStart = timestamp;
      
      const elapsed = timestamp - animationStart;
      const progress = Math.min(elapsed / ANIMATION_DURATION, 1);
      
      setAnimationProgress(progress);
      drawDots(progress);
      
      if (progress < 1) {
        animationFrameRef.current = requestAnimationFrame(animate);
      }
    };
    
    if (animationFrameRef.current) {
      cancelAnimationFrame(animationFrameRef.current);
    }
    animationFrameRef.current = requestAnimationFrame(animate);
  };

  return (
    <div className="app">
      <canvas
        ref={canvasRef}
        onClick={handleCanvasClick}
        style={{
          display: 'block',
          width: '100vw',
          height: '100vh',
          cursor: 'pointer'
        }}
      />
    </div>
  );
};

export default App;
